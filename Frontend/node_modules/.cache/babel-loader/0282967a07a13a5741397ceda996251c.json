{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Poly\\\\Projects\\\\WebSpider\\\\Frontend\\\\src\\\\components\\\\Pages\\\\Crawler\\\\Crawler.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { isValidUrl } from \"../../../util/validator\";\nimport ContentTable from \"../../Common/ContentTable\";\nimport SideMenu from \"../../Common/SideMenu\";\nimport { crawlPage } from \"../../../util/http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Crawler = () => {\n  _s();\n\n  const [state, setState] = useState({\n    ui: {\n      submit: \"SUBMIT\",\n      active: false\n    },\n    pages: []\n  });\n\n  const getUrlValidation = event => {\n    setState({ ...state,\n      ui: { ...state.ui,\n        active: isValidUrl(event.target.value)\n      }\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      url,\n      maxDepth,\n      maxPages\n    } = e.target.elements;\n    const options = {\n      maxDepth: maxDepth.value,\n      maxPages: maxPages.value,\n      pages: [url.value]\n    };\n    await startCrawl({\n      options\n    });\n    console.log(state.pages.length);\n  };\n\n  const startCrawl = async ({\n    options\n  }) => {\n    const response = await crawlPage({\n      options\n    });\n\n    if (response.status !== 200) {\n      console.log(`[!] Crawl ended with status: ${response.status}`);\n      return;\n    }\n\n    const result = await response.json();\n    console.log(result);\n    console.log(new URL(result.options.pages[result.options.pages.length - 1]));\n    await renderPageRow(result.page);\n\n    if (!result.fin) {\n      await startCrawl({\n        options: result.options\n      });\n    }\n  };\n\n  const renderPageRow = page => new Promise(resolve => {\n    setState(s => ({ ...s,\n      pages: [...s.pages, page]\n    }));\n    resolve();\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crawlerPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"form-section\",\n      className: \"column sm\",\n      children: /*#__PURE__*/_jsxDEV(SideMenu, {\n        handleSubmit: handleSubmit,\n        submitStatus: state.ui.submit,\n        submitActive: state.ui.active,\n        getUrlValidation: getUrlValidation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"view-section\",\n      className: \"column bg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row title\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"RESULTS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContentTable, {\n        pages: state.pages,\n        isLink: isValidUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Crawler, \"emQcmlRijIxVmre6odfAm5SU7fw=\");\n\n_c = Crawler;\nexport default Crawler;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crawler\");","map":{"version":3,"sources":["C:/Users/Poly/Projects/WebSpider/Frontend/src/components/Pages/Crawler/Crawler.js"],"names":["useState","isValidUrl","ContentTable","SideMenu","crawlPage","Crawler","state","setState","ui","submit","active","pages","getUrlValidation","event","target","value","handleSubmit","e","preventDefault","url","maxDepth","maxPages","elements","options","startCrawl","console","log","length","response","status","result","json","URL","renderPageRow","page","fin","Promise","resolve","s"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,SAAT,QAA0B,oBAA1B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,EAAE,EAAE;AACFC,MAAAA,MAAM,EAAE,QADN;AAEFC,MAAAA,MAAM,EAAE;AAFN,KAD6B;AAKjCC,IAAAA,KAAK,EAAE;AAL0B,GAAD,CAAlC;;AAQA,QAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEPE,MAAAA,EAAE,EAAE,EACF,GAAGF,KAAK,CAACE,EADP;AAEFE,QAAAA,MAAM,EAAET,UAAU,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd;AAFhB;AAFG,KAAD,CAAR;AAOD,GARD;;AAUA,QAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,QAAP;AAAiBC,MAAAA;AAAjB,QAA8BJ,CAAC,CAACH,MAAF,CAASQ,QAA7C;AACA,UAAMC,OAAO,GAAG;AACdH,MAAAA,QAAQ,EAAEA,QAAQ,CAACL,KADL;AAEdM,MAAAA,QAAQ,EAAEA,QAAQ,CAACN,KAFL;AAGdJ,MAAAA,KAAK,EAAE,CAACQ,GAAG,CAACJ,KAAL;AAHO,KAAhB;AAKA,UAAMS,UAAU,CAAC;AAAED,MAAAA;AAAF,KAAD,CAAhB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAK,CAACK,KAAN,CAAYgB,MAAxB;AACD,GAVD;;AAYA,QAAMH,UAAU,GAAG,OAAO;AAAED,IAAAA;AAAF,GAAP,KAAuB;AACxC,UAAMK,QAAQ,GAAG,MAAMxB,SAAS,CAAC;AAAEmB,MAAAA;AAAF,KAAD,CAAhC;;AACA,QAAIK,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BJ,MAAAA,OAAO,CAACC,GAAR,CAAa,gCAA+BE,QAAQ,CAACC,MAAO,EAA5D;AACA;AACD;;AACD,UAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAIM,GAAJ,CAAQF,MAAM,CAACP,OAAP,CAAeZ,KAAf,CAAqBmB,MAAM,CAACP,OAAP,CAAeZ,KAAf,CAAqBgB,MAArB,GAA8B,CAAnD,CAAR,CAAZ;AACA,UAAMM,aAAa,CAACH,MAAM,CAACI,IAAR,CAAnB;;AAEA,QAAI,CAACJ,MAAM,CAACK,GAAZ,EAAiB;AACf,YAAMX,UAAU,CAAC;AAAED,QAAAA,OAAO,EAAEO,MAAM,CAACP;AAAlB,OAAD,CAAhB;AACD;AACF,GAdD;;AAeA,QAAMU,aAAa,GAAIC,IAAD,IACpB,IAAIE,OAAJ,CAAaC,OAAD,IAAa;AACvB9B,IAAAA,QAAQ,CAAE+B,CAAD,KAAQ,EAAE,GAAGA,CAAL;AAAQ3B,MAAAA,KAAK,EAAE,CAAC,GAAG2B,CAAC,CAAC3B,KAAN,EAAauB,IAAb;AAAf,KAAR,CAAD,CAAR;AACAG,IAAAA,OAAO;AACR,GAHD,CADF;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,SAAS,EAAC,WAAjC;AAAA,6BACE,QAAC,QAAD;AACE,QAAA,YAAY,EAAErB,YADhB;AAEE,QAAA,YAAY,EAAEV,KAAK,CAACE,EAAN,CAASC,MAFzB;AAGE,QAAA,YAAY,EAAEH,KAAK,CAACE,EAAN,CAASE,MAHzB;AAIE,QAAA,gBAAgB,EAAEE;AAJpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,SAAS,EAAC,WAAjC;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,YAAD;AAAc,QAAA,KAAK,EAAEN,KAAK,CAACK,KAA3B;AAAkC,QAAA,MAAM,EAAEV;AAA1C;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAtED;;GAAMI,O;;KAAAA,O;AAuEN,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { isValidUrl } from \"../../../util/validator\";\r\nimport ContentTable from \"../../Common/ContentTable\";\r\nimport SideMenu from \"../../Common/SideMenu\";\r\nimport { crawlPage } from \"../../../util/http\";\r\n\r\nconst Crawler = () => {\r\n  const [state, setState] = useState({\r\n    ui: {\r\n      submit: \"SUBMIT\",\r\n      active: false,\r\n    },\r\n    pages: [],\r\n  });\r\n\r\n  const getUrlValidation = (event) => {\r\n    setState({\r\n      ...state,\r\n      ui: {\r\n        ...state.ui,\r\n        active: isValidUrl(event.target.value),\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { url, maxDepth, maxPages } = e.target.elements;\r\n    const options = {\r\n      maxDepth: maxDepth.value,\r\n      maxPages: maxPages.value,\r\n      pages: [url.value],\r\n    };\r\n    await startCrawl({ options });\r\n    console.log(state.pages.length);\r\n  };\r\n\r\n  const startCrawl = async ({ options }) => {\r\n    const response = await crawlPage({ options });\r\n    if (response.status !== 200) {\r\n      console.log(`[!] Crawl ended with status: ${response.status}`);\r\n      return;\r\n    }\r\n    const result = await response.json();\r\n    console.log(result);\r\n    console.log(new URL(result.options.pages[result.options.pages.length - 1]));\r\n    await renderPageRow(result.page);\r\n\r\n    if (!result.fin) {\r\n      await startCrawl({ options: result.options });\r\n    }\r\n  };\r\n  const renderPageRow = (page) =>\r\n    new Promise((resolve) => {\r\n      setState((s) => ({ ...s, pages: [...s.pages, page] }));\r\n      resolve();\r\n    });\r\n\r\n  return (\r\n    <div className=\"crawlerPage\">\r\n      <div id=\"form-section\" className=\"column sm\">\r\n        <SideMenu\r\n          handleSubmit={handleSubmit}\r\n          submitStatus={state.ui.submit}\r\n          submitActive={state.ui.active}\r\n          getUrlValidation={getUrlValidation}\r\n        />\r\n      </div>\r\n      <div id=\"view-section\" className=\"column bg\">\r\n        <div className=\"row title\">\r\n          <h2>RESULTS</h2>\r\n        </div>\r\n        <ContentTable pages={state.pages} isLink={isValidUrl}></ContentTable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Crawler;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import fetchIntercept from 'fetch-intercept';\nexport const initIntercept = () => {\n  fetchIntercept.register({\n    request(url, config = {}) {\n      // Modify the url or config here\n      const configEnriched = { ...config,\n        headers: { ...config.headers\n        }\n      };\n      return [url, configEnriched];\n    },\n\n    requestError(error) {\n      // Called when an error occured during another 'request' interceptor call\n      return Promise.reject(error);\n    },\n\n    response(response) {\n      // Modify the reponse object\n      return response;\n    },\n\n    responseError(error) {\n      // Handle an fetch error\n      return Promise.reject(error);\n    }\n\n  });\n};","map":{"version":3,"sources":["C:/Users/Poly/Projects/WebSpider/Frontend/src/util/fetchInterceptService.js"],"names":["fetchIntercept","initIntercept","register","request","url","config","configEnriched","headers","requestError","error","Promise","reject","response","responseError"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,iBAA3B;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjCD,EAAAA,cAAc,CAACE,QAAf,CAAwB;AACtBC,IAAAA,OAAO,CAACC,GAAD,EAAMC,MAAM,GAAG,EAAf,EAAmB;AACxB;AAEA,YAAMC,cAAc,GAAG,EACrB,GAAGD,MADkB;AAErBE,QAAAA,OAAO,EAAE,EACP,GAAGF,MAAM,CAACE;AADH;AAFY,OAAvB;AAOA,aAAO,CAACH,GAAD,EAAME,cAAN,CAAP;AACD,KAZqB;;AActBE,IAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,KAjBqB;;AAmBtBG,IAAAA,QAAQ,CAACA,QAAD,EAAW;AACjB;AACA,aAAOA,QAAP;AACD,KAtBqB;;AAwBtBC,IAAAA,aAAa,CAACJ,KAAD,EAAQ;AACnB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;;AA3BqB,GAAxB;AA6BD,CA9BM","sourcesContent":["import fetchIntercept from 'fetch-intercept'\r\n\r\nexport const initIntercept = () => {\r\n  fetchIntercept.register({\r\n    request(url, config = {}) {\r\n      // Modify the url or config here\r\n\r\n      const configEnriched = {\r\n        ...config,\r\n        headers: {\r\n          ...config.headers,\r\n        },\r\n      }\r\n\r\n      return [url, configEnriched]\r\n    },\r\n\r\n    requestError(error) {\r\n      // Called when an error occured during another 'request' interceptor call\r\n      return Promise.reject(error)\r\n    },\r\n\r\n    response(response) {\r\n      // Modify the reponse object\r\n      return response\r\n    },\r\n\r\n    responseError(error) {\r\n      // Handle an fetch error\r\n      return Promise.reject(error)\r\n    },\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Poly\\\\Projects\\\\WebSpider\\\\Frontend\\\\src\\\\components\\\\Common\\\\SideMenu\\\\SideMenu.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { crawlPage } from \"../../../util/http\";\n/* Main form */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SideMenu = ({\n  resultCallback,\n  pageCallback,\n  isLink\n}) => {\n  _s();\n\n  const [status, setStatus] = useState(\"Submit\");\n  const [state, setState] = useState({\n    ui: {\n      submit: false\n    },\n    pages: []\n  });\n  /* submit handler */\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      url,\n      maxDepth,\n      maxPages\n    } = e.target.elements;\n    const options = {\n      url: url.value,\n      maxDepth: maxDepth.value,\n      maxPages: maxPages.value,\n      pages: []\n    };\n    const result = await crawlPage({\n      options\n    });\n  };\n  /* crawl page by page */\n\n\n  const getPage = async e => {\n    // clear ui pages table\n    resultCallback({\n      status: \"clear\",\n      data: []\n    }); // lock submit\n\n    setState({ ...state,\n      ui: { ...state.ui,\n        submit: false\n      }\n    });\n    const {\n      url,\n      maxDepth,\n      maxPages\n    } = e.target.elements; // set data\n\n    let opt = {\n      url: url.value,\n      maxDepth: maxDepth.value,\n      maxPages: maxPages.value,\n      pages: [],\n      toLook: []\n    };\n    let pageIndex = 1; // update ui button text\n\n    setStatus(\"Loading page \" + pageIndex + \"...\"); // post data to api\n\n    do {\n      let response = await fetch(\"http://localhost:5000/api/crawl_page\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify(opt)\n      }); // wait for api response\n\n      let result = await response.json(); // set new data\n\n      opt.url = result.data.url;\n      opt.toLook = [...result.data.toLook];\n      opt.pages = [...result.data.pages]; // check for stop condition\n\n      if (!opt.toLook.length) {\n        break;\n      } // send results to callback\n\n\n      pageCallback(result);\n      pageIndex++; // update ui button text\n\n      setStatus(\"Loading page \" + pageIndex + \"...\");\n    } while (opt.toLook.length); // unlock submit\n\n\n    setState({ ...state,\n      ui: { ...state.ui,\n        submit: true\n      }\n    });\n    setStatus(\"Submit\");\n  };\n  /* crawl all pages */\n\n  /*\r\n    const getAll = async(e) => {\r\n        // clear ui pages table\r\n        resultCallback({status:'clear', data:[]});\r\n        // lock submit\r\n        setState(false);\r\n        const {url, maxDepth, maxPages} = e.target.elements;\r\n        let values = {\r\n            url: url.value,\r\n            maxDepth: maxDepth.value,\r\n            maxPages: maxPages.value\r\n        }\r\n        setStatus(\"Loading pages...\");\r\n        // post data to api \r\n        let response = await fetch(\"http://localhost:5000/api/crawl_all\", {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json;charset=utf-8\"\r\n            },\r\n            body: JSON.stringify(values)\r\n        });\r\n        // wait for api response\r\n        let result = await response.json();\r\n        // send results to callback\r\n        resultCallback(result);\r\n        // unlock submit\r\n        setState(true);\r\n        setStatus(\"Submit\");\r\n    }\r\n    */\n\n  /* validate http/s link */\n\n\n  const getValidation = url => {\n    setState({ ...state,\n      ui: { ...state.ui,\n        submit: isLink(url)\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sideMenu\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"url\",\n          children: \"URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"ex: https://www.google.com\",\n          id: \"url\",\n          onChange: e => getValidation(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"maxDepth\",\n          children: \"Max Depth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          defaultValue: \"0\",\n          id: \"maxDepth\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"maxPages\",\n          children: \"Max Pages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          defaultValue: \"1\",\n          id: \"maxPages\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"submit_btn\",\n          disabled: !state.ui.submit,\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SideMenu, \"rBr2Ioowt9YVlXQm4jygcJ8o1yg=\");\n\n_c = SideMenu;\nexport default SideMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"SideMenu\");","map":{"version":3,"sources":["C:/Users/Poly/Projects/WebSpider/Frontend/src/components/Common/SideMenu/SideMenu.js"],"names":["useState","crawlPage","SideMenu","resultCallback","pageCallback","isLink","status","setStatus","state","setState","ui","submit","pages","handleSubmit","e","preventDefault","url","maxDepth","maxPages","target","elements","options","value","result","getPage","data","opt","toLook","pageIndex","response","fetch","method","headers","body","JSON","stringify","json","length","getValidation"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { crawlPage } from \"../../../util/http\";\r\n\r\n/* Main form */\r\nconst SideMenu = ({ resultCallback, pageCallback, isLink }) => {\r\n  const [status, setStatus] = useState(\"Submit\");\r\n  const [state, setState] = useState({\r\n    ui: {\r\n      submit: false,\r\n    },\r\n    pages: [],\r\n  });\r\n\r\n  /* submit handler */\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { url, maxDepth, maxPages } = e.target.elements;\r\n    const options = {\r\n      url: url.value,\r\n      maxDepth: maxDepth.value,\r\n      maxPages: maxPages.value,\r\n      pages: [],\r\n    };\r\n    const result = await crawlPage({ options });\r\n  };\r\n\r\n  /* crawl page by page */\r\n  const getPage = async (e) => {\r\n    // clear ui pages table\r\n    resultCallback({ status: \"clear\", data: [] });\r\n    // lock submit\r\n    setState({ ...state, ui: { ...state.ui, submit: false } });\r\n    const { url, maxDepth, maxPages } = e.target.elements;\r\n    // set data\r\n    let opt = {\r\n      url: url.value,\r\n      maxDepth: maxDepth.value,\r\n      maxPages: maxPages.value,\r\n      pages: [],\r\n      toLook: [],\r\n    };\r\n    let pageIndex = 1;\r\n    // update ui button text\r\n    setStatus(\"Loading page \" + pageIndex + \"...\");\r\n    // post data to api\r\n    do {\r\n      let response = await fetch(\"http://localhost:5000/api/crawl_page\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(opt),\r\n      });\r\n      // wait for api response\r\n      let result = await response.json();\r\n      // set new data\r\n      opt.url = result.data.url;\r\n      opt.toLook = [...result.data.toLook];\r\n      opt.pages = [...result.data.pages];\r\n      // check for stop condition\r\n      if (!opt.toLook.length) {\r\n        break;\r\n      }\r\n      // send results to callback\r\n      pageCallback(result);\r\n      pageIndex++;\r\n      // update ui button text\r\n      setStatus(\"Loading page \" + pageIndex + \"...\");\r\n    } while (opt.toLook.length);\r\n    // unlock submit\r\n    setState({ ...state, ui: { ...state.ui, submit: true } });\r\n    setStatus(\"Submit\");\r\n  };\r\n\r\n  /* crawl all pages */\r\n  /*\r\n    const getAll = async(e) => {\r\n        // clear ui pages table\r\n        resultCallback({status:'clear', data:[]});\r\n        // lock submit\r\n        setState(false);\r\n        const {url, maxDepth, maxPages} = e.target.elements;\r\n        let values = {\r\n            url: url.value,\r\n            maxDepth: maxDepth.value,\r\n            maxPages: maxPages.value\r\n        }\r\n        setStatus(\"Loading pages...\");\r\n        // post data to api \r\n        let response = await fetch(\"http://localhost:5000/api/crawl_all\", {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json;charset=utf-8\"\r\n            },\r\n            body: JSON.stringify(values)\r\n        });\r\n        // wait for api response\r\n        let result = await response.json();\r\n        // send results to callback\r\n        resultCallback(result);\r\n        // unlock submit\r\n        setState(true);\r\n        setStatus(\"Submit\");\r\n    }\r\n    */\r\n  /* validate http/s link */\r\n  const getValidation = (url) => {\r\n    setState({ ...state, ui: { ...state.ui, submit: isLink(url) } });\r\n  };\r\n\r\n  return (\r\n    <div className=\"sideMenu\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"row mt-1\">\r\n          <label htmlFor=\"url\">URL</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ex: https://www.google.com\"\r\n            id=\"url\"\r\n            onChange={(e) => getValidation(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"row mt-1\">\r\n          <label htmlFor=\"maxDepth\">Max Depth</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0\"\r\n            defaultValue=\"0\"\r\n            id=\"maxDepth\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"row mt-1\">\r\n          <label htmlFor=\"maxPages\">Max Pages</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            defaultValue=\"1\"\r\n            id=\"maxPages\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"row mt-3\">\r\n          <button type=\"submit\" id=\"submit_btn\" disabled={!state.ui.submit}>\r\n            {status}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideMenu;\r\n"]},"metadata":{},"sourceType":"module"}
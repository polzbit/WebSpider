{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Poly\\\\Projects\\\\WebSpider\\\\Frontend\\\\src\\\\components\\\\Common\\\\SideMenu\\\\SideMenu.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\n/* Main form */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SideMenu = ({\n  resultCallback,\n  pageCallback,\n  isLink\n}) => {\n  _s();\n\n  const [status, setStatus] = useState(\"Submit\");\n  const [state, setState] = useState(false);\n  /* submit handler */\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    getPage(e);\n  };\n  /* crawl page by page */\n\n\n  const getPage = async e => {\n    // clear ui pages table\n    resultCallback({\n      status: 'clear',\n      data: []\n    }); // lock submit\n\n    setState(false);\n    const {\n      url,\n      maxDepth,\n      maxPages\n    } = e.target.elements; // set data\n\n    let opt = {\n      url: url.value,\n      maxDepth: maxDepth.value,\n      maxPages: maxPages.value,\n      pages: [],\n      toLook: []\n    };\n    let pageIndex = 1; // update ui button text\n\n    setStatus(\"Loading page \" + pageIndex + \"...\"); // post data to api \n\n    do {\n      let response = await fetch(\"http://localhost:5000/api/crawl_page\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify(opt)\n      }); // wait for api response\n\n      let result = await response.json(); // set new data\n\n      opt.url = result.data.url;\n      opt.toLook = [...result.data.toLook];\n      opt.pages = [...result.data.pages]; // check for stop condition\n\n      if (!opt.toLook.length) {\n        break;\n      } // send results to callback\n\n\n      pageCallback(result);\n      pageIndex++; // update ui button text\n\n      setStatus(\"Loading page \" + pageIndex + \"...\");\n    } while (opt.toLook.length); // unlock submit\n\n\n    setState(true);\n    setStatus(\"Submit\");\n  };\n  /* crawl all pages */\n\n  /*\r\n  const getAll = async(e) => {\r\n      // clear ui pages table\r\n      resultCallback({status:'clear', data:[]});\r\n      // lock submit\r\n      setState(false);\r\n      const {url, maxDepth, maxPages} = e.target.elements;\r\n      let values = {\r\n          url: url.value,\r\n          maxDepth: maxDepth.value,\r\n          maxPages: maxPages.value\r\n      }\r\n      setStatus(\"Loading pages...\");\r\n      // post data to api \r\n      let response = await fetch(\"http://localhost:5000/api/crawl_all\", {\r\n          method: 'POST',\r\n          headers: {\r\n              \"Content-Type\": \"application/json;charset=utf-8\"\r\n          },\r\n          body: JSON.stringify(values)\r\n      });\r\n      // wait for api response\r\n      let result = await response.json();\r\n      // send results to callback\r\n      resultCallback(result);\r\n      // unlock submit\r\n      setState(true);\r\n      setStatus(\"Submit\");\r\n  }\r\n  */\n\n  /* validate http/s link */\n\n\n  const getValidation = url => {\n    setState(isLink(url));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sideMenu\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"url\",\n          children: \"URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"ex: https://www.google.com\",\n          id: \"url\",\n          onChange: e => getValidation(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"maxDepth\",\n          children: \"Max Depth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          defaultValue: \"0\",\n          id: \"maxDepth\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"maxPages\",\n          children: \"Max Pages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          defaultValue: \"1\",\n          id: \"maxPages\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"submit_btn\",\n          disabled: !state,\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SideMenu, \"NSWqyN3tNWMwyL/jxERzrBz62DI=\");\n\n_c = SideMenu;\nexport default SideMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"SideMenu\");","map":{"version":3,"sources":["C:/Users/Poly/Projects/WebSpider/Frontend/src/components/Common/SideMenu/SideMenu.js"],"names":["useState","SideMenu","resultCallback","pageCallback","isLink","status","setStatus","state","setState","handleSubmit","e","preventDefault","getPage","data","url","maxDepth","maxPages","target","elements","opt","value","pages","toLook","pageIndex","response","fetch","method","headers","body","JSON","stringify","result","json","length","getValidation"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n\r\n/* Main form */\r\nconst SideMenu = ({ resultCallback, pageCallback, isLink })=> {\r\n    const [status, setStatus] = useState(\"Submit\")\r\n    const [state, setState] = useState(false)\r\n\r\n    /* submit handler */\r\n\tconst handleSubmit = async(e) => {\r\n        e.preventDefault();\r\n        getPage(e);\r\n    }\r\n    \r\n    /* crawl page by page */\r\n    const getPage = async(e) => {\r\n        // clear ui pages table\r\n        resultCallback({status:'clear', data:[]});\r\n        // lock submit\r\n        setState(false);\r\n        const {url, maxDepth, maxPages} = e.target.elements;\r\n        // set data\r\n        let opt = {\r\n            url: url.value,\r\n            maxDepth: maxDepth.value,\r\n            maxPages: maxPages.value,\r\n            pages: [],\r\n            toLook: []\r\n        }\r\n        let pageIndex = 1;\r\n        // update ui button text\r\n        setStatus(\"Loading page \"+ pageIndex + \"...\");\r\n        // post data to api \r\n        do {\r\n            let response = await fetch(\"http://localhost:5000/api/crawl_page\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json;charset=utf-8\"\r\n                },\r\n                body: JSON.stringify(opt)\r\n            });\r\n            // wait for api response\r\n            let result = await response.json();\r\n            // set new data\r\n            opt.url = result.data.url;\r\n            opt.toLook = [...result.data.toLook];\r\n            opt.pages = [...result.data.pages];\r\n            // check for stop condition\r\n            if(!opt.toLook.length) {\r\n                break;\r\n            }\r\n            // send results to callback\r\n            pageCallback(result);\r\n            pageIndex++;\r\n            // update ui button text\r\n            setStatus(\"Loading page \"+ pageIndex +\"...\");\r\n        } while(opt.toLook.length);\r\n        // unlock submit\r\n        setState(true);\r\n        setStatus(\"Submit\");\r\n    }\r\n\r\n    /* crawl all pages */\r\n    /*\r\n    const getAll = async(e) => {\r\n        // clear ui pages table\r\n        resultCallback({status:'clear', data:[]});\r\n        // lock submit\r\n        setState(false);\r\n        const {url, maxDepth, maxPages} = e.target.elements;\r\n        let values = {\r\n            url: url.value,\r\n            maxDepth: maxDepth.value,\r\n            maxPages: maxPages.value\r\n        }\r\n        setStatus(\"Loading pages...\");\r\n        // post data to api \r\n        let response = await fetch(\"http://localhost:5000/api/crawl_all\", {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json;charset=utf-8\"\r\n            },\r\n            body: JSON.stringify(values)\r\n        });\r\n        // wait for api response\r\n        let result = await response.json();\r\n        // send results to callback\r\n        resultCallback(result);\r\n        // unlock submit\r\n        setState(true);\r\n        setStatus(\"Submit\");\r\n    }\r\n    */\r\n    /* validate http/s link */\r\n    const getValidation = (url) => {\r\n\t    setState(isLink(url));   \r\n  \t}\r\n\r\n    return (\r\n        <div className='sideMenu'>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row mt-1\">\r\n                    <label htmlFor=\"url\">URL</label>\r\n                    <input type=\"text\" placeholder=\"ex: https://www.google.com\" id=\"url\" onChange={(e) => getValidation(e.target.value)} required/>\r\n                </div>\r\n                <div className=\"row mt-1\">\r\n                    <label htmlFor=\"maxDepth\">Max Depth</label>\r\n                    <input type=\"number\" min=\"0\" defaultValue=\"0\" id=\"maxDepth\"required/>\r\n                </div>\r\n                <div className=\"row mt-1\">\r\n                    <label htmlFor=\"maxPages\">Max Pages</label>\r\n                    <input type=\"number\" min=\"1\" defaultValue=\"1\" id=\"maxPages\"required/>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                    <button type=\"submit\" id=\"submit_btn\" disabled={!state}>{status}</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n\t\r\n}\r\n\r\nexport default SideMenu;"]},"metadata":{},"sourceType":"module"}